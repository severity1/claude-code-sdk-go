name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  GO_VERSION: '1.23'

jobs:
  test:
    name: Test
    strategy:
      matrix:
        go-version: ['1.18', '1.19', '1.20', '1.21', '1.22', '1.23']
        os: [ubuntu-latest, macos-latest, windows-latest]
    runs-on: ${{ matrix.os }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ matrix.go-version }}
        cache: true

    - name: Verify dependencies
      run: go mod verify

    - name: Check go mod tidy
      run: |
        go mod tidy
        git diff --exit-code go.mod go.sum

    - name: Build
      run: go build -v ./...

    - name: Test
      run: go test -race -coverprofile=coverage.out ./...

    - name: Upload coverage to Codecov
      if: matrix.os == 'ubuntu-latest' && matrix.go-version == '1.23'
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.out
        flags: unittests
        name: codecov-umbrella

  lint:
    name: Lint
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}
        cache: true

    - name: Run golangci-lint
      uses: golangci/golangci-lint-action@v3
      with:
        version: latest
        args: --timeout=5m

    - name: Go vet
      run: go vet ./...

    - name: Check gofmt
      run: |
        if [ "$(gofmt -s -l . | wc -l)" -gt 0 ]; then
          echo "The following files are not formatted with gofmt:"
          gofmt -s -l .
          exit 1
        fi

  govulncheck:
    name: Go Vulnerability Check
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}
        cache: true

    - name: Install govulncheck
      run: go install golang.org/x/vuln/cmd/govulncheck@latest

    - name: Run govulncheck
      run: govulncheck ./...

  examples:
    name: Test Examples
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}
        cache: true

    - name: Test example builds
      run: |
        for dir in examples/*/; do
          if [ -f "$dir/main.go" ]; then
            echo "Building $dir"
            cd "$dir"
            go build -v .
            cd - > /dev/null
          fi
        done

    - name: Test example with subdirectories
      run: |
        for dir in examples/*/*/; do
          if [ -f "$dir/main.go" ]; then
            echo "Building $dir"
            cd "$dir"
            go build -v .
            cd - > /dev/null
          fi
        done